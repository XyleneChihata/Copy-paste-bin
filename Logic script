using UnityEngine;
using System.Collections.Generic;

public class GameManager : MonoBehaviour
{
    public GameObject cardPrefab;
    public Transform[] cardSlots; // 4 card slots

    private List<CardData> cardPool = new List<CardData>();
    private List<Card> currentCards = new List<Card>();

    void Start()
    {
        InitializeCardPool();
        InitializeCards();
    }

    void InitializeCardPool()
    {
        cardPool.Clear();

        // Weighting: Damage 1 (common), Damage 2 (uncommon), Damage 3 (rare)
        AddCardToPool(1, 50); // 50% chance
        AddCardToPool(2, 30); // 30% chance
        AddCardToPool(3, 15); // 15% chance
        AddCardToPool(-2, 5); // 5% chance (heal card)

        ShuffleCardPool();
    }

    void AddCardToPool(int damage, int weight)
    {
        for (int i = 0; i < weight; i++)
        {
            cardPool.Add(new CardData(damage, damage == -2 ? "Heal" : "Attack"));
        }
    }

    void ShuffleCardPool()
    {
        for (int i = cardPool.Count - 1; i > 0; i--)
        {
            int randomIndex = Random.Range(0, i + 1);
            (cardPool[i], cardPool[randomIndex]) = (cardPool[randomIndex], cardPool[i]);
        }
    }

    void InitializeCards()
    {
        for (int i = 0; i < cardSlots.Length; i++)
        {
            SpawnNewCard(i);
        }
    }

    void SpawnNewCard(int slotIndex)
    {
        GameObject newCard = Instantiate(cardPrefab, cardSlots[slotIndex]);
        Card cardComponent = newCard.GetComponent<Card>();

        CardData randomCard = cardPool[Random.Range(0, cardPool.Count)];
        cardComponent.Initialize(randomCard.damage, randomCard.type);
        currentCards.Insert(slotIndex, cardComponent);
    }
}

// Structure to store card properties
[System.Serializable]
public class CardData
{
    public int damage;
    public string type;

    public CardData(int dmg, string type)
    {
        this.damage = dmg;
        this.type = type;
    }
}

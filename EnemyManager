using UnityEngine;
using UnityEngine.UI;

[System.Serializable]
public class EnemyData
{
    public string name;
    public GameObject prefab;
    public int hp;
    public int weight;
}

public class EnemyManager : MonoBehaviour
{
    public EnemyData[] mobEnemies;
    public EnemyData[] bossEnemies;

    public Text enemyNameText; // UI element for enemy name
    public Slider enemyHpBar;  // UI element for enemy HP

    private int enemyDefeatCount = 0;
    private Enemy currentEnemy;

    void Start()
    {
        SpawnEnemy();
    }

    void SpawnEnemy()
    {
        EnemyData selectedEnemy;

        if (enemyDefeatCount >= 10)
        {
            selectedEnemy = WeightedRandomSelection(bossEnemies);
            enemyDefeatCount = 0;
        }
        else
        {
            selectedEnemy = WeightedRandomSelection(mobEnemies);
        }

        if (currentEnemy == null)
        {
            currentEnemy = FindObjectOfType<Enemy>(); // Find existing enemy
        }

        if (currentEnemy != null)
        {
            currentEnemy.Initialize(selectedEnemy.hp, selectedEnemy.name);
            UpdateUI(selectedEnemy.name, selectedEnemy.hp);
        }
    }

    private EnemyData WeightedRandomSelection(EnemyData[] enemyArray)
    {
        int totalWeight = 0;
        foreach (EnemyData enemy in enemyArray) totalWeight += enemy.weight;

        int randomValue = Random.Range(0, totalWeight);
        int accumulatedWeight = 0;

        foreach (EnemyData enemy in enemyArray)
        {
            accumulatedWeight += enemy.weight;
            if (randomValue < accumulatedWeight) return enemy;
        }

        return enemyArray[0];
    }

    public void OnEnemyDefeated()
    {
        enemyDefeatCount++;
        SpawnEnemy();
    }

    private void UpdateUI(string enemyName, int enemyHp)
    {
        if (enemyNameText != null)
            enemyNameText.text = enemyName;

        if (enemyHpBar != null)
        {
            enemyHpBar.maxValue = enemyHp;
            enemyHpBar.value = enemyHp;
        }
    }
}
